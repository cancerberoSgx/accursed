export function longText() {
  return `
import chalk from 'chalk';
import * as _ from 'lodash';
/**
 * Adapted from inquirer sources. The paginator keeps track of a pointer index in a list and returns* a subset of the choices if the list is too long.
 */
export class AbstractPaginator {
  pointer: number;
  lastIndex: number;
  screen: any;
  constructor(screen?: any) {
    this.pointer = 0;
    this.lastIndex = 0;
    this.screen = screen;
  }
  paginate(output: string, active: number, pageSize: number | undefined) {
    pageSize = pageSize || 7;
    var active_: string[];
    const middleOfList = Math.floor(pageSize / 2);
    let lines = output.split('\n');
    if (this.screen) {
      lines = this.screen.breakLines(lines);
      active_ = lines.splice(0, active);
      lines = _.flatten(lines);
    }
    // Make sure there's enough lines to paginate
    if (lines.length <= pageSize) {
      return output;
    }
    // Move the pointer only when the user go down and limit it to the middle of the list
    if (this.pointer < middleOfList && this.lastIndex < active && active - this.lastIndex < pageSize) {
      this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);
    }
    this.lastIndex = active;
    // Duplicate the lines so it give an infinite list look
    const section = ['\n', ...lines].splice(active, pageSize).join('\n');
    return (section +
      '\n' +
      chalk.dim('(Navigate Nodes using arrows, type tsquery selectors to filter, enter for selecting node)'));
  }
}

export const nodeKinds = [
  'NumericLiteral',
  'BigIntLiteral',
  'StringLiteral',
  'JsxText',
  'JsxTextAllWhiteSpaces',
  'RegularExpressionLiteral',
  'NoSubstitutionTemplateLiteral',
  'TemplateHead',
  'TemplateMiddle',
  'TemplateTail',
  'Identifier',
  'QualifiedName',
  'ComputedPropertyName',
  'TypeParameter',
  'Parameter',
  'Decorator',
  'PropertySignature',
  'PropertyDeclaration',
  'MethodSignature',
  'MethodDeclaration',
  'Constructor',
  'GetAccessor',
  'SetAccessor',
  'CallSignature',
  'ConstructSignature',
  'IndexSignature',
  'TypePredicate',
  'TypeReference',
  'FunctionType',
  'ConstructorType',
  'TypeQuery',
  'TypeLiteral',
  'ArrayType',
  'TupleType',
  'OptionalType',
  'RestType',
  'UnionType',
  'IntersectionType',
  'ConditionalType',
  'InferType',
  'ParenthesizedType',
  'ThisType',
  'TypeOperator',
  'IndexedAccessType',
  'MappedType',
  'LiteralType',
  'ImportType',
  'ObjectBindingPattern',
  'ArrayBindingPattern',
  'BindingElement',
  'ArrayLiteralExpression',
  'ObjectLiteralExpression',
  'PropertyAccessExpression',
  'ElementAccessExpression',
  'CallExpression',
  'NewExpression',
  'TaggedTemplateExpression',
  'TypeAssertionExpression',
  'ParenthesizedExpression',
  'FunctionExpression',
  'ArrowFunction',
  'DeleteExpression',
  'TypeOfExpression',
  'VoidExpression',
  'AwaitExpression',
  'PrefixUnaryExpression',
  'PostfixUnaryExpression',
  'BinaryExpression',
  'ConditionalExpression',
  'TemplateExpression',
  'YieldExpression',
  'SpreadElement',
  'ClassExpression',
  'OmittedExpression',
  'ExpressionWithTypeArguments',
  'AsExpression',
  'NonNullExpression',
  'MetaProperty',
  'SyntheticExpression',
  'TemplateSpan',
  'SemicolonClassElement',
  'Block',
  'VariableStatement',
  'EmptyStatement',
  'ExpressionStatement',
  'IfStatement',
  'DoStatement',
  'WhileStatement',
  'ForStatement',
  'ForInStatement',
  'ForOfStatement',
  'ContinueStatement',
  'BreakStatement',
  'ReturnStatement',
  'WithStatement',
  'SwitchStatement',
  'LabeledStatement',
  'ThrowStatement',
  'TryStatement',
  'DebuggerStatement',
  'VariableDeclaration',
  'VariableDeclarationList',
  'FunctionDeclaration',
  'ClassDeclaration',
  'InterfaceDeclaration',
  'TypeAliasDeclaration',
  'EnumDeclaration',
  'ModuleDeclaration',
  'ModuleBlock',
  'CaseBlock',
  'NamespaceExportDeclaration',
  'ImportEqualsDeclaration',
  'ImportDeclaration',
  'ImportClause',
  'NamespaceImport',
  'NamedImports',
  'ImportSpecifier',
  'ExportAssignment',
  'ExportDeclaration',
  'NamedExports',
  'ExportSpecifier',
  'MissingDeclaration',
  'ExternalModuleReference',
  'JsxElement',
  'JsxSelfClosingElement',
  'JsxOpeningElement',
  'JsxClosingElement',
  'JsxFragment',
  'JsxOpeningFragment',
  'JsxClosingFragment',
  'JsxAttribute',
  'JsxAttributes',
  'JsxSpreadAttribute',
  'JsxExpression',
  'CaseClause',
  'DefaultClause',
  'HeritageClause',
  'CatchClause',
  'PropertyAssignment',
  'ShorthandPropertyAssignment',
  'SpreadAssignment',
  'EnumMember',
  'UnparsedPrologue',
  'UnparsedPrepend',
  'UnparsedText',
  'UnparsedInternalText',
  'UnparsedSyntheticReference',
  'SourceFile',
  'Bundle',
  'UnparsedSource',
  'InputFiles',
  'JSDocTypeExpression',
  'JSDocAllType',
  'JSDocUnknownType',
  'JSDocNullableType',
  'JSDocNonNullableType',
  'JSDocOptionalType',
  'JSDocFunctionType',
  'JSDocVariadicType',
  'JSDocComment',
  'JSDocTypeLiteral',
  'JSDocSignature',
  'JSDocTag',
  'JSDocAugmentsTag',
  'JSDocClassTag',
  'JSDocCallbackTag',
  'JSDocEnumTag',
  'JSDocParameterTag',
  'JSDocReturnTag',
  'JSDocThisTag',
  'JSDocTypeTag',
  'JSDocTemplateTag',
  'JSDocTypedefTag',
  'JSDocPropertyTag',
  'SyntaxList',
  'NotEmittedStatement',
  'PartiallyEmittedExpression',
  'CommaListExpression',
  'MergeDeclarationMarker',
  'EndOfDeclarationMarker',
  'Count',
  'FirstAssignment',
  'LastAssignment',
  'FirstCompoundAssignment',
  'LastCompoundAssignment',
  'FirstReservedWord',
  'LastReservedWord',
  'FirstKeyword',
  'LastKeyword',
  'FirstTypeNode',
  'LastTypeNode',
  'FirstPunctuation',
  'LastPunctuation',
  'FirstToken',
  'LastToken',
  'FirstTriviaToken',
  'LastTriviaToken',
  'FirstLiteralToken',
  'LastLiteralToken',
  'FirstTemplateToken',
  'LastTemplateToken',
  'FirstBinaryOperator',
  'LastBinaryOperator',
  'FirstNode',
  'FirstJSDocNode',
  'LastJSDocNode',
  'FirstJSDocTagNode',
  'LastJSDocTagNode',
  'BreakKeyword',
  'CaseKeyword',
  'CatchKeyword',
  'ClassKeyword',
  'ConstKeyword',
  'ContinueKeyword',
  'DebuggerKeyword',
  'DefaultKeyword',
  'DeleteKeyword',
  'DoKeyword',
  'ElseKeyword',
  'EnumKeyword',
  'ExportKeyword',
  'ExtendsKeyword',
  'FalseKeyword',
  'FinallyKeyword',
  'ForKeyword',
  'FunctionKeyword',
  'IfKeyword',
  'ImportKeyword',
  'InKeyword',
  'InstanceOfKeyword',
  'NewKeyword',
  'NullKeyword',
  'ReturnKeyword',
  'SuperKeyword',
  'SwitchKeyword',
  'ThisKeyword',
  'ThrowKeyword',
  'TrueKeyword',
  'TryKeyword',
  'TypeOfKeyword',
  'VarKeyword',
  'VoidKeyword',
  'WhileKeyword',
  'WithKeyword',
  'ImplementsKeyword',
  'InterfaceKeyword',
  'LetKeyword',
  'PackageKeyword',
  'PrivateKeyword',
  'ProtectedKeyword',
  'PublicKeyword',
  'StaticKeyword',
  'YieldKeyword',
  'AbstractKeyword',
  'AsKeyword',
  'AnyKeyword',
  'AsyncKeyword',
  'AwaitKeyword',
  'BooleanKeyword',
  'ConstructorKeyword',
  'DeclareKeyword',
  'GetKeyword',
  'InferKeyword',
  'IsKeyword',
  'KeyOfKeyword',
  'ModuleKeyword',
  'NamespaceKeyword',
  'NeverKeyword',
  'ReadonlyKeyword',
  'RequireKeyword',
  'NumberKeyword',
  'ObjectKeyword',
  'SetKeyword',
  'StringKeyword',
  'SymbolKeyword',
  'TypeKeyword',
  'UndefinedKeyword',
  'UniqueKeyword',
  'UnknownKeyword',
  'FromKeyword',
  'GlobalKeyword',
  'BigIntKeyword',
  'OfKeyword'
]



  `
}
